export default {
  header: 'Система сеток',
  headerText: 'Vuetify имеет 12-ти точечную систему сеток. Построенную с использованием <kbd>flex-box</kbd>, сетка используется для компоновки содержимого приложения. Она содержит 5 типов точек прерывания, которые используются для определенных размеров экрана или ориентации. Свойства для компонентов сетки фактически являются классами, которые получены из их определенных свойств. Это позволяет вам легко указать вспомогательные классы в качестве свойства, при этом все еще предоставляя классы для использования в любом месте.',
  components: ['v-container', 'v-layout', 'v-flex', 'v-spacer'],
  examples: [{
    grid: {
      header: 'Usage',
      desc: '`v-container` можно использовать для страницы фокусирующейся на центре, или с учетом того, что `fluid` поддерживает всю ширину. `v-layout` используется для разделения секций и содержит` v-flex`. Структура вашего макета будет следующей: **v-container** &raquo; **v-layout** &raquo; **v-flex**. Каждая часть сетки представляет собой элемент _flex-box_. Окончательно `v-flex` автоматически устанавливает для своих детей <kbd>flex: 1 1 auto</kbd>.',
      uninverted: true
    },
    offset: {
      header: 'Смещение',
      desc: 'Смещения полезны для компенсации элементов, которые еще не видны, или для контроля положения контента. Так же, как и с точками останова, вы можете установить смещение для любых доступных размеров. Это позволяет точно настроить ваш макет приложения именно на ваши нужды.',
      uninverted: true
    },
    order: {
      header: 'Порядок',
      desc: 'Вы можете управлять упорядочением элементов сетки. Как и в случае смещений, вы можете устанавливать различный порядок для разных размеров. Дизайн спец макетов экрана, которые подходят для любого приложения.',
      uninverted: true
    },
    directionAndAlign: {
      header: 'Направление и выравнивание',
      desc: 'Назначьте направление и выравнивание различными способами. Все <kbd>flex-box</kbd> api доступны через интуитивные вспомогательные свойства.',
      uninverted: true
    },
    rowColumnBreakpoint: {
      header: 'Точки останова строки и столбца',
      desc: 'Динамически изменяйте свой макет на основе разрешения. **(измените размер экрана и посмотрите, как изменится разметка `row` на небольших контрольных точках)**',
      uninverted: true
    },
    nestedGrid: {
      header: 'Вложенная сетка',
      desc: 'Сетки могут быть вложенными, подобно другим фреймворкам, для того, чтобы достичь очень настраиваемой разметки.',
      uninverted: true
    },
    uniqueLayouts: {
      header: 'Уникальная разметка',
      desc: 'Сила и гибкость сетки Vuetify позволяют создавать удивительные пользовательские интерфейсы.',
      uninverted: true
    },
    spacer: {
      header: 'v-spacer',
      desc: 'Компонент `v-spacer` полезен, когда вы хотите заполнить свободное пространство или сделать пространство между двумя компонентами.'
    },
    tags: {
      header: 'Html теги',
      desc: 'Иногда вам нужно указать элемент макета в качестве определенного тега, например, элемент `section` или` li`.'
    }
  }],
  props: {
    tag: 'Mixins.Routable.props.tag'
  },
  breakpointHeader: 'Объект точки останова',
  breakpointText1: 'Vuetify преобразует доступные точки останова в доступный объект из вашего приложения. Это позволит вам назначать / применять определенные свойства и атрибуты на основе размера видимого экрана. Доступ к объекту можно получить из:',
  breakpointText2: 'Этот объект содержит те же семантические свойства, которые вы уже использовали в сетке. Давайте попробуем реальный пример У вас есть компонент `v-dialog`, который вы хотите преобразовать в **full-screen** на мобильных устройствах. Обычно вам нужно привязывать наблюдателей к размеру видимого экрана и/или проверять каждый раз, когда загружается страница.',
  breakpointText3: 'Это много шаблонов для написания. Даже если вы решите использовать встроенную директиву <a href="/directives/resizing">v-resize</a>, вам все равно придется определять метод изменения размера. С объектом **breakpoint(точка останова)** вы можете полностью пропустить эту логику и вернуться к созданию своего приложения.'
}
