process.env.VUE_ENV = 'server';

const fs = require('fs');
const path = require('path');
const LRU = require('lru-cache')
const { createBundleRenderer } = require('vue-server-renderer')
const prerendering = require('aspnet-prerendering');
const resolve = file => path.resolve(__dirname, file)

const isProd = process.env.NODE_ENV === 'production'

const template = fs.readFileSync(resolve('./assets/index.template.html'), 'utf-8')

function createRenderer(bundle, options) {
    // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
    return createBundleRenderer(bundle, Object.assign(options, {
        template,
        // for component caching
        cache: LRU({
            max: 1000,
            maxAge: 1000 * 60 * 15
        }),
        // this is only needed when vue-server-renderer is npm-linked
        basedir: resolve('./wwwroot'),
        // recommended for performance
        runInNewContext: false
    }))
}

// let readyPromise

// In production: create server renderer using built server bundle.
// The server bundle is generated by vue-ssr-webpack-plugin.
const bundle = require('./dist/vue-ssr-server-bundle.json')
// The client manifests are optional, but it allows the renderer
// to automatically infer preload/prefetch links and directly add <script>
// tags for any async chunks used during render, avoiding waterfall requests.
const clientManifest = require('../wwwroot/dist/vue-ssr-client-manifest.json')
let bundleRenderer = createRenderer(bundle, {
    clientManifest
})

module.exports = prerendering.createServerRenderer(function (params) {
    return new Promise(function (resolve, reject) {
        const context = params.data ? params.data : {
            title: params.baseUrl, // default title
            url: params.url
        };
        bundleRenderer.renderToString(context, (err, resultHtml) => { // params.data is the store's initial state
            if (err) {
                reject(err.message);
            }
            resolve({
                html: resultHtml,
                globals: {
                    __INITIAL_STATE__: params.data // window.__INITIAL_STATE__ will be the initial state of the Vuex store
                }
            });
        });
    });
});
